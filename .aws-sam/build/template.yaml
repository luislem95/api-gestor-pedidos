AWSTemplateFormatVersion: '2010-09-09'
Transform: AWS::Serverless-2016-10-31
Description: "Proyecto b\xE1sico para obtener usuarios desde DynamoDB."
Parameters:
  LayerLambdaAPI:
    Type: String
    Default: arn:aws:lambda:us-east-1:527847838144:layer:lambda-api-v1:1
  S3Store:
    Type: String
    Default: clarosv-store
  S3ImagenesFolder:
    Type: String
    Default: tienda-pedidos/
Globals:
  Function:
    Timeout: 30
Resources:
  GetSesion:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: GetSesion
      Handler: getSesion.handler
      Runtime: nodejs20.x
      FunctionName: claro-store-sesion-getSesion
      Description: Lambda para obtener o crear sesiones
      Environment:
        Variables:
          TABLE_NAME: general-storage
      Events:
        Api:
          Type: Api
          Properties:
            Path: /sesion
            Method: ANY
      Policies:
      - DynamoDBCrudPolicy:
          TableName: general-storage
    Metadata:
      SamResourceId: GetSesion
  UpDateSesion:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: UpDateSesion
      Handler: upDatePedido.handler
      Runtime: nodejs20.x
      FunctionName: claro-store-sesion-update-sesion
      Description: Sirve para modificar cantidades o montos de los carritos que se
        tengan.
      Environment:
        Variables:
          TABLE_NAME: general-storage
      Events:
        Api:
          Type: Api
          Properties:
            Path: /update-sesion-cantidad
            Method: ANY
      Policies:
      - DynamoDBCrudPolicy:
          TableName: general-storage
    Metadata:
      SamResourceId: UpDateSesion
  deletePedidoSesion:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: deletePedidoSesion
      Handler: deletePedidoSesion.handler
      Runtime: nodejs20.x
      FunctionName: claro-store-sesion-delete-sesion
      Description: Sirve para eliminar un item del carrito.
      Environment:
        Variables:
          TABLE_NAME: general-storage
      Events:
        Api:
          Type: Api
          Properties:
            Path: /delete-sesion-item
            Method: ANY
      Policies:
      - DynamoDBCrudPolicy:
          TableName: general-storage
    Metadata:
      SamResourceId: deletePedidoSesion
  UploadImageFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: UploadImageFunction
      Handler: upLoadImage.handler
      Runtime: nodejs20.x
      FunctionName: claro-store-pedido-upLoadImageToS3
      Events:
        Api:
          Type: Api
          Properties:
            Path: /upload-image
            Method: ANY
      Policies:
      - S3CrudPolicy:
          BucketName:
            Ref: S3Store
      - DynamoDBCrudPolicy:
          TableName: general-storage
    Metadata:
      SamResourceId: UploadImageFunction
  GetSignedUrlFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: GetSignedUrlFunction
      Handler: getS3.handler
      Runtime: nodejs20.x
      FunctionName: claro-store-sesion-getSignedUrl
      Description: "Genera URLs prefirmadas para las im\xE1genes en S3."
      MemorySize: 128
      Environment:
        Variables:
          BUCKET_NAME:
            Ref: S3Store
          FOLDER_NAME:
            Ref: S3ImagenesFolder
      Events:
        Api:
          Type: Api
          Properties:
            Path: /get-signed-url
            Method: GET
      Policies:
      - S3CrudPolicy:
          BucketName:
            Ref: S3Store
    Metadata:
      SamResourceId: GetSignedUrlFunction
  GetInventarioFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: GetInventarioFunction
      Handler: getAllInventario.handler
      Runtime: nodejs20.x
      FunctionName: claro-store-inventario-getAllInventario
      Environment:
        Variables:
          TABLE_NAME: general-storage
      Events:
        Api:
          Type: Api
          Properties:
            Path: /dashboard
            Method: ANY
      Policies:
      - DynamoDBCrudPolicy:
          TableName: general-storage
    Metadata:
      SamResourceId: GetInventarioFunction
  GetHistorialFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: GetHistorialFunction
      Handler: getAllHistorial.handler
      Runtime: nodejs20.x
      FunctionName: claro-store-pedido-getAllHistorial
      Environment:
        Variables:
          TABLE_NAME: general-storage
      Events:
        Api:
          Type: Api
          Properties:
            Path: /historial
            Method: ANY
      Policies:
      - DynamoDBCrudPolicy:
          TableName: general-storage
    Metadata:
      SamResourceId: GetHistorialFunction
  ConfirmarPedido:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: ConfirmarPedido
      Handler: confirmarPedido.handler
      Runtime: nodejs20.x
      FunctionName: claro-store-pedido-confirmar-pedido
      Description: Maneja las confirmaciones de claro-estor-pedidos
      MemorySize: 128
      Environment:
        Variables:
          TABLE_NAME: general-storage
      Events:
        Api:
          Type: Api
          Properties:
            Path: /confirmar-pedido
            Method: ANY
      Policies:
      - DynamoDBCrudPolicy:
          TableName: general-storage
    Metadata:
      SamResourceId: ConfirmarPedido
  PutPedido:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: PutPedido
      Handler: putPedido.handler
      Runtime: nodejs20.x
      FunctionName: claro-store-sesion-put-carrito
      Description: Maneja los insert de pedidos de claro-estore-pedidos
      Environment:
        Variables:
          TABLE_NAME: general-storage
      Events:
        Api:
          Type: Api
          Properties:
            Path: /insert-pedido
            Method: ANY
      Policies:
      - DynamoDBCrudPolicy:
          TableName: general-storage
    Metadata:
      SamResourceId: PutPedido
Outputs:
  ApiGatewayEndpoint:
    Description: "URL del endpoint de API Gateway para la funci\xF3n GetAllUsersFunction"
    Value:
      Fn::Sub: https://${ServerlessRestApi}.execute-api.${AWS::Region}.amazonaws.com/Prod/
