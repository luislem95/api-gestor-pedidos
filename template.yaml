AWSTemplateFormatVersion: '2010-09-09'
Transform: AWS::Serverless-2016-10-31
Description: >-
  Proyecto básico para obtener usuarios desde DynamoDB.

Parameters:
  LayerLambdaAPI:
    Type: String
    Default: arn:aws:lambda:us-east-1:527847838144:layer:lambda-api-v1:1
  S3Store:
    Type: String
    Default: 'clarosv-store'
  S3ImagenesFolder:
    Type: String
    Default: 'tienda-pedidos/'

Globals:
  Function:
    Timeout: 30

Resources:
# de esta manera en mi proyecto recibo las sesiones para manejar 
# sesion de usuario y carrito y que no dure mas de 7 dias 
  GetSesion:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: handlers/getSesion
      Handler: getSesion.handler
      Runtime: nodejs20.x
      FunctionName: claro-store-sesion-getSesion
      Description: "Lambda para obtener o crear sesiones"
      Environment:
        Variables:
          TABLE_NAME: general-storage
      Events:
        Api:
          Type: Api
          Properties:
            Path: /sesion
            Method: ANY
      Policies:
        - DynamoDBCrudPolicy:
            TableName: general-storage
#aqui lo que hago es manejar el carrito y a sea ingresar un item nuevo
#o actualizarlo con mas items y cantidades 
  UpDateSesion:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: handlers/upDatePedido
      Handler: upDatePedido.handler
      Runtime: nodejs20.x
      FunctionName: claro-store-sesion-update-sesion   
      Description: Sirve para modificar cantidades o montos de los carritos que se tengan.
      Environment:
        Variables:
          TABLE_NAME: general-storage
      Events:
        Api:
          Type: Api
          Properties:
            Path: /update-sesion-cantidad
            Method: ANY
      Policies:
      - DynamoDBCrudPolicy:
          TableName: general-storage
#con esta elimino el item del carrito que no se desea llevar 
  deletePedidoSesion:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: handlers/deletePedidoSesion
      Handler: deletePedidoSesion.handler
      Runtime: nodejs20.x
      FunctionName: claro-store-sesion-delete-sesion   
      Description: Sirve para eliminar un item del carrito.
      Environment:
        Variables:
          TABLE_NAME: general-storage
      Events:
        Api:
          Type: Api
          Properties:
            Path: /delete-sesion-item
            Method: ANY
      Policies:
      - DynamoDBCrudPolicy:
          TableName: general-storage
#aqui subo una imagen a s3 y devuelvo donde esta ubicado
  UploadImageFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: handlers/upLoadImage
      Handler: upLoadImage.handler
      Runtime: nodejs20.x
      FunctionName: claro-store-pedido-upLoadImageToS3
      Events:
        Api:
          Type: Api
          Properties:
            Path: /upload-image
            Method: ANY
      Policies:
        - S3CrudPolicy:
            BucketName: 'clarosv-store'
        - DynamoDBCrudPolicy:
            TableName: general-storage
#hago una firma autorizada para poder previsualizar las imagenes
#que se desean subir 
  GetSignedUrlFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: handlers/getS3
      Handler: getS3.handler
      Runtime: nodejs20.x
      FunctionName: claro-store-sesion-getSignedUrl
      Description: Genera URLs prefirmadas para las imágenes en S3.
      MemorySize: 128
      Environment:
        Variables:
          BUCKET_NAME: !Ref S3Store
          FOLDER_NAME: !Ref S3ImagenesFolder
      Events:
        Api:
          Type: Api
          Properties:
            Path: /get-signed-url
            Method: GET
      Policies:
        - S3CrudPolicy:
            BucketName: !Ref S3Store  

#hago un get de todo el inventario que esta existente
  GetInventarioFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: handlers/getAllInventario
      Handler: getAllInventario.handler
      Runtime: nodejs20.x
      FunctionName: claro-store-inventario-getAllInventario   
      Environment:
        Variables:
          TABLE_NAME: general-storage
      Events:
        Api:
          Type: Api
          Properties:
            Path: /dashboard
            Method: ANY
      Policies:
      - DynamoDBCrudPolicy:
          TableName: general-storage
#hago un get de todo el historial que esta existente
#con un limite de fecha con un between
  GetHistorialFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: handlers/getAllHistorial
      Handler: getAllHistorial.handler
      Runtime: nodejs20.x
      FunctionName: claro-store-pedido-getAllHistorial   
      Environment:
        Variables:
          TABLE_NAME: general-storage
      Events:
        Api:
          Type: Api
          Properties:
            Path: /historial
            Method: ANY
      Policies:
      - DynamoDBCrudPolicy:
          TableName: general-storage

  ConfirmarPedido:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: handlers/confirmarPedido
      Handler: confirmarPedido.handler
      Runtime: nodejs20.x
      FunctionName: claro-store-pedido-confirmar-pedido
      Description: 'Maneja las confirmaciones de claro-estor-pedidos'
      MemorySize: 128
      Environment:
        Variables:
          TABLE_NAME: general-storage
      Events:
        Api:
          Type: Api
          Properties:
            Path: /confirmar-pedido
            Method: ANY
      Policies:
      - DynamoDBCrudPolicy:
          TableName: general-storage
#ingresa los items al carrito o los actualiza dependiendo que es lo que se quiera hacer 
  PutPedido:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: handlers/putPedido
      Handler: putPedido.handler
      Runtime: nodejs20.x
      FunctionName: claro-store-sesion-put-carrito
      Description: 'Maneja los insert de pedidos de claro-estore-pedidos'
      Environment:
        Variables:
          TABLE_NAME: general-storage
      Events:
        Api:
          Type: Api
          Properties:
            Path: /insert-pedido
            Method: ANY
      Policies:
        - DynamoDBCrudPolicy:
            TableName: general-storage
#antes de que el pedido sea enviado y que la imagen subida se puede cancelar y este es el lambda para ello  
  CancelarPedido:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: handlers/cancelarPedido
      Handler: cancelarPedido.handler
      Runtime: nodejs20.x
      FunctionName: claro-store-pedido-cancelar-pedido
      Description: 'Maneja las cancelaciones de claro-estor-pedidos'
      MemorySize: 128
      Environment:
        Variables:
          TABLE_NAME: general-storage
      Events:
        Api:
          Type: Api
          Properties:
            Path: /cancelar-pedido
            Method: ANY
      Policies:
      - DynamoDBCrudPolicy:
          TableName: general-storage

Outputs:
  ApiGatewayEndpoint:
    Description: URL del endpoint de API Gateway para la función GetAllUsersFunction
    Value: !Sub "https://${ServerlessRestApi}.execute-api.${AWS::Region}.amazonaws.com/Prod/"
